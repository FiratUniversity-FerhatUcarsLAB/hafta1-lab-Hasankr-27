Öğrenci No:250541015
AD-SOYAD:Hasan Kara

Lütfen seçtiğiniz algoritmaya ait çözümü ve diğer isterleri aşağıya ekleyiniz:
ALGORİTMA: SudokuCoz_Hybrid(Tablo)
public class HybridSudokuSolver {

    static final int SIZE = 9; // Sudoku boyutu

    public static void main(String[] args) {
        int[][] board = {
            {5, 3, 0, 0, 7, 0, 0, 0, 0},
            {6, 0, 0, 1, 9, 5, 0, 0, 0},
            {0, 9, 8, 0, 0, 0, 0, 6, 0},
            {8, 0, 0, 0, 6, 0, 0, 0, 3},
            {4, 0, 0, 8, 0, 3, 0, 0, 1},
            {7, 0, 0, 0, 2, 0, 0, 0, 6},
            {0, 6, 0, 0, 0, 0, 2, 8, 0},
            {0, 0, 0, 4, 1, 9, 0, 0, 5},
            {0, 0, 0, 0, 8, 0, 0, 7, 9}
        };

        System.out.println("Başlangıç Sudoku:");
        printBoard(board);

        if (solveHybrid(board)) {
            System.out.println("\nSudoku çözüldü:");
            printBoard(board);
        } else {
            System.out.println("Çözüm bulunamadı.");
        }
    }

    // -------------------------
    // 1. Hybrid çözüm: önce mantık, sonra backtracking
    // -------------------------
    public static boolean solveHybrid(int[][] board) {
        // Mantıkla çöz
        boolean changed;
        do {
            changed = applyLogic(board);
        } while (changed);

        // Eğer boş hücre varsa backtracking ile çöz
        return solveBacktracking(board);
    }

    // -------------------------
    // 2. Constraint Propagation (Mantık)
    // -------------------------
    public static boolean applyLogic(int[][] board) {
        boolean changed = false;

        for (int row = 0; row < SIZE; row++) {
            for (int col = 0; col < SIZE; col++) {
                if (board[row][col] == 0) {
                    boolean[] possible = possibleValues(board, row, col);
                    int count = 0, lastNum = 0;
                    for (int i = 1; i <= SIZE; i++) {
                        if (possible[i]) {
                            count++;
                            lastNum = i;
                        }
                    }
                    if (count == 1) { // Tek seçenek varsa hücreyi doldur
                        board[row][col] = lastNum;
                        changed = true;
                    }
                }
            }
        }

        return changed;
    }

    // -------------------------
    // 3. Backtracking çözüm
    // -------------------------
    public static boolean solveBacktracking(int[][] board) {
        for (int row = 0; row < SIZE; row++) {
            for (int col = 0; col < SIZE; col++) {
                if (board[row][col] == 0) {
                    for (int num = 1; num <= SIZE; num++) {
                        if (isValid(board, row, col, num)) {
                            board[row][col] = num;
                            if (solveBacktracking(board)) {
                                return true;
                            }
                            board[row][col] = 0; // geri al
                        }
                    }
                    return false; // Hiçbir sayı uymadıysa geri dön
                }
            }
        }
        return true; // Tüm hücreler doldu
    }

    // -------------------------
    // 4. Geçerli sayı kontrolü
    // -------------------------
    public static boolean isValid(int[][] board, int row, int col, int num) {
        for (int i = 0; i < SIZE; i++) {
            if (board[row][i] == num || board[i][col] == num)
                return false;
        }

        int startRow = row - row % 3;
        int startCol = col - col % 3;
        for (int i = 0; i < 3; i++)
            for (int j = 0; j < 3; j++)
                if (board[startRow + i][startCol + j] == num)
                    return false;

        return true;
    }

    // -------------------------
    // 5. Hücre için olası değerleri bul
    // -------------------------
    public static boolean[] possibleValues(int[][] board, int row, int col) {
        boolean[] possible = new boolean[SIZE + 1];
        for (int i = 1; i <= SIZE; i++) possible[i] = true;

        for (int i = 0; i < SIZE; i++) {
            if (board[row][i] != 0) possible[board[row][i]] = false;
            if (board[i][col] != 0) possible[board[i][col]] = false;
        }

        int startRow = row - row % 3;
        int startCol = col - col % 3;
        for (int i = 0; i < 3; i++)
            for (int j = 0; j < 3; j++)
                if (board[startRow + i][startCol + j] != 0)
                    possible[board[startRow + i][startCol + j]] = false;

        return possible;
    }

    // -------------------------
    // 6. Sudoku yazdırma
    // -------------------------
    public static void printBoard(int[][] board) {
        for (int row = 0; row < SIZE; row++) {
            for (int col = 0; col < SIZE; col++) {
                System.out.print(board[row][col] + " ");
            }
            System.out.println();
        }
    }
}

